<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>「 ~ 」- jnan806&#39;s blog</title>
  
  <subtitle>jnan806&#39;s blog</subtitle>
  <link href="http://jnan806.panpan.cloud/atom.xml" rel="self"/>
  
  <link href="http://jnan806.panpan.cloud/"/>
  <updated>2022-05-25T02:53:23.000Z</updated>
  <id>http://jnan806.panpan.cloud/</id>
  
  <author>
    <name>jnan806</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Gloang 初探 - Hello World</title>
    <link href="http://jnan806.panpan.cloud/2022/05/25/golang/helloworld/"/>
    <id>http://jnan806.panpan.cloud/2022/05/25/golang/helloworld/</id>
    <published>2022-05-25T02:33:01.000Z</published>
    <updated>2022-05-25T02:53:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是-Go"><a href="#什么是-Go" class="headerlink" title="什么是 Go"></a>什么是 Go</h1><p>Go语言是谷歌2009年发布的第二款开源编程语言，它专门针对多处理器系统应用程序的编程进行了优化，它是一种系统语言其非常有用和强大，其程序可以媲美C或C++代码的速度，而且更加安全、支持并行进程。</p><h1 id="Go-语言环境安装"><a href="#Go-语言环境安装" class="headerlink" title="Go 语言环境安装"></a>Go 语言环境安装</h1><p>Go 语言支持以下系统：</p><ul><li>Linux</li><li>FreeBSD</li><li>Mac OS X（也称为 Darwin）</li><li>Window</li></ul><h2 id="UNIX-x2F-Linux-x2F-MacOSX-x2F-FreeBSD-安装"><a href="#UNIX-x2F-Linux-x2F-MacOSX-x2F-FreeBSD-安装" class="headerlink" title="UNIX&#x2F;Linux&#x2F;MacOSX&#x2F;FreeBSD 安装"></a>UNIX&#x2F;Linux&#x2F;MacOSX&#x2F;FreeBSD 安装</h2><p>众所周知, UNIX&#x2F;Linux&#x2F;Mac OS X, 和 FreeBSD 都是基于 Unix 开发的操作系统，因此，在一些软件的安装上有些类似，<br>而在 Golang 语言环境的安装上，几乎没有区别。</p><p>1、下载源码包 进入官网 <a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a> 下载对应版本的 Golang 源码包<br>2、将下载的源码包解压至 &#x2F;usr&#x2F;local目录。 <code>tar -C /usr/local -xzf go1.15.2.linux-amd64.tar.gz</code><br>3、添加环境变量<code>PATH</code>： <code>export PATH=$PATH:/usr/local/go/bin</code></p><h2 id="Windows-安装"><a href="#Windows-安装" class="headerlink" title="Windows 安装"></a>Windows 安装</h2><p>Windows 需要下载 .msi 后缀(在下载列表中可以找到该文件，如go1.4.2.windows-amd64.msi)的安装包来安装。<br>默认情况下.msi文件会安装在 c:\Go 目录下。你可以将 c:\Go\bin 目录添加到 PATH 环境变量中。添加后你需要重启命令窗口才能生效。</p><h2 id="其他参数设置"><a href="#其他参数设置" class="headerlink" title="其他参数设置"></a>其他参数设置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## GOPATH</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=/Users/J/opt/dev/env/golang/gopath</span><br><span class="line"><span class="comment">## GO111MODULE</span></span><br><span class="line"><span class="built_in">export</span> GO111MODULE=on</span><br><span class="line"><span class="comment">## GOPROXY</span></span><br><span class="line"><span class="built_in">export</span> GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure><p><strong>GOPROXY 可选</strong><br>Go1.12版本之后，开始使用<code>go mod</code>模式来管理依赖环境了<br>由于国内访问不到默认的GOPROXY配置链接，所以我们需要换一个PROXY，这里推荐使用 <a href="https://goproxy.io/">https://goproxy.io</a> 或 <a href="https://goproxy.cn./">https://goproxy.cn。</a></p><p><strong>GO111MODULE 可选</strong><br>Go Mod 要启用go module支持首先要设置环境变量GO111MODULE，通过它可以开启或关闭模块支持，它有三个可选值：off、on、auto，默认值是auto。<br>GO111MODULE&#x3D;off，禁用模块支持，编译时会从GOPATH和vendor文件夹中查找包。<br>GO111MODULE&#x3D;on，启用模块支持，编译时会忽略GOPATH和vendor文件夹，只根据 go.mod下载依赖。<br>GO111MODULE&#x3D;auto，当项目在$GOPATH&#x2F;src外且项目根目录有go.mod文件时，开启模块支持。  </p><p><strong>GOPATH 可选</strong><br>Golang 第三方依赖包可配置下载路径，具体通过通过 GOPAHT 来配置，一次下载全局使用。</p><h2 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure><p>如果正确显示版本号，则说明安装成功</p><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>编写 Hello World 代码</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go run test.go</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是-Go&quot;&gt;&lt;a href=&quot;#什么是-Go&quot; class=&quot;headerlink&quot; title=&quot;什么是 Go&quot;&gt;&lt;/a&gt;什么是 Go&lt;/h1&gt;&lt;p&gt;Go语言是谷歌2009年发布的第二款开源编程语言，它专门针对多处理器系统应用程序的编程进行了优化，它是一种系统语言其非常有用和强大，其程序可以媲美C或C++代码的速度，而且更加安全、支持并行进程。&lt;/p&gt;
&lt;h1 id=&quot;Go-语言环境安装&quot;&gt;&lt;a href=&quot;#Go-语言环境安装&quot; class=&quot;headerlink&quot; title=&quot;Go 语言环境安装&quot;&gt;&lt;/a&gt;Go 语言环境安装&lt;/h1&gt;&lt;p&gt;Go 语言支持以下系统：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;FreeBSD&lt;/li&gt;
&lt;li&gt;Mac OS X（也称为 Darwin）&lt;/li&gt;
&lt;li&gt;Window&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;UNIX-x2F-Linux-x2F-MacOSX-x2F-FreeBSD-安装&quot;&gt;&lt;a href=&quot;#UNIX-x2F-Linux-x2F-MacOSX-x2F-FreeBSD-安装&quot; class=&quot;headerlink&quot; title=&quot;UNIX&amp;#x2F;Linux&amp;#x2F;MacOSX&amp;#x2F;FreeBSD 安装&quot;&gt;&lt;/a&gt;UNIX&amp;#x2F;Linux&amp;#x2F;MacOSX&amp;#x2F;FreeBSD 安装&lt;/h2&gt;&lt;p&gt;众所周知, UNIX&amp;#x2F;Linux&amp;#x2F;Mac OS X, 和 FreeBSD 都是基于 Unix 开发的操作系统，因此，在一些软件的安装上有些类似，&lt;br&gt;而在 Golang 语言环境的安装上，几乎没有区别。&lt;/p&gt;
&lt;p&gt;1、下载源码包 进入官网 &lt;a href=&quot;https://golang.google.cn/dl/&quot;&gt;https://golang.google.cn/dl/&lt;/a&gt; 下载对应版本的 Golang 源码包&lt;br&gt;2、将下载的源码包解压至 &amp;#x2F;usr&amp;#x2F;local目录。 &lt;code&gt;tar -C /usr/local -xzf go1.15.2.linux-amd64.tar.gz&lt;/code&gt;&lt;br&gt;3、添加环境变量&lt;code&gt;PATH&lt;/code&gt;： &lt;code&gt;export PATH=$PATH:/usr/local/go/bin&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Windows-安装&quot;&gt;&lt;a href=&quot;#Windows-安装&quot; class=&quot;headerlink&quot; title=&quot;Windows 安装&quot;&gt;&lt;/a&gt;Windows 安装&lt;/h2&gt;&lt;p&gt;Windows 需要下载 .msi 后缀(在下载列表中可以找到该文件，如go1.4.2.windows-amd64.msi)的安装包来安装。&lt;br&gt;默认情况下.msi文件会安装在 c:\Go 目录下。你可以将 c:\Go\bin 目录添加到 PATH 环境变量中。添加后你需要重启命令窗口才能生效。&lt;/p&gt;</summary>
    
    
    
    <category term="Golang" scheme="http://jnan806.panpan.cloud/categories/Golang/"/>
    
    
    <category term="Golang" scheme="http://jnan806.panpan.cloud/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes containerd版本</title>
    <link href="http://jnan806.panpan.cloud/2021/11/25/cncf/kubernetes/kubernetes-containerd/"/>
    <id>http://jnan806.panpan.cloud/2021/11/25/cncf/kubernetes/kubernetes-containerd/</id>
    <published>2021-11-25T04:21:44.000Z</published>
    <updated>2022-09-23T04:31:53.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础环境配置"><a href="#基础环境配置" class="headerlink" title="基础环境配置"></a>基础环境配置</h2><h3 id="节点规划"><a href="#节点规划" class="headerlink" title="节点规划"></a>节点规划</h3><table><thead><tr><th>IP</th><th>hostname</th><th>说明</th></tr></thead><tbody><tr><td>10.0.0.1</td><td>k8s-master</td><td>master 节点</td></tr><tr><td>10.0.0.2</td><td>k8s-node01</td><td>node   节点</td></tr><tr><td>10.0.0.3</td><td>k8s-node02</td><td>node   节点</td></tr></tbody></table><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><h4 id="所有节点-配置hosts，修改-x2F-etc-x2F-hosts如下："><a href="#所有节点-配置hosts，修改-x2F-etc-x2F-hosts如下：" class="headerlink" title="所有节点 配置hosts，修改&#x2F;etc&#x2F;hosts如下："></a>所有节点 配置hosts，修改&#x2F;etc&#x2F;hosts如下：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">10.0.0.1 k8s-master</span><br><span class="line">10.0.0.2 k8s-node01</span><br><span class="line">10.0.0.3 k8s-node02</span><br></pre></td></tr></table></figure><h4 id="所有节点-CentOS-初始化"><a href="#所有节点-CentOS-初始化" class="headerlink" title="所有节点 CentOS 初始化"></a>所有节点 CentOS 初始化</h4><p>详细步骤 回顾文章 <a href="/2017/01/07/linux/initial/">&lt;&lt; CentOS 初始化 &gt;&gt;</a></p><h4 id="所有节点-containerd-安装"><a href="#所有节点-containerd-安装" class="headerlink" title="所有节点 containerd 安装"></a>所有节点 containerd 安装</h4><p>详细步骤 回顾文章 <a href="/2021/11/25/cncf/docker/containerd/">&lt;&lt; containerd 安装 &gt;&gt;</a></p><h2 id="K8s组件及Runtime安装"><a href="#K8s组件及Runtime安装" class="headerlink" title="K8s组件及Runtime安装"></a>K8s组件及Runtime安装</h2><h3 id="所有节点配置k8s内核："><a href="#所有节点配置k8s内核：" class="headerlink" title="所有节点配置k8s内核："></a>所有节点配置k8s内核：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.d/k8s.conf</span><br><span class="line"></span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-arptables = 1</span><br></pre></td></tr></table></figure><p>此时 <code>/etc/sysctl.d/k8s.conf</code> 无法生效，需要启动模块</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">临时生效，执行如下命令</span></span><br><span class="line">modprobe br_netfilter</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启永久生效，执行如下步骤</span></span><br><span class="line">vim /etc/sysconfig/modules/br_netfilter.modules</span><br><span class="line"></span><br><span class="line">modprobe br_netfilter</span><br><span class="line"></span><br><span class="line">chmod +x /etc/sysconfig/modules/br_netfilter.modules</span><br><span class="line">/bin/bash /etc/sysconfig/modules/br_netfilter.modules</span><br></pre></td></tr></table></figure><p>查看是否成功</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsmod | grep br_netfilter</span><br></pre></td></tr></table></figure><h3 id="所有节点-ipvs-安装"><a href="#所有节点-ipvs-安装" class="headerlink" title="所有节点 ipvs 安装"></a>所有节点 ipvs 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y ipset ipvsadm</span><br></pre></td></tr></table></figure><p>配置 ipvs </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/modules/ipvs.modules</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">modprobe -- ip_vs </span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br><span class="line"></span><br><span class="line">chmod +x /etc/sysconfig/modules/ipvs.modules</span><br><span class="line">/bin/bash /etc/sysconfig/modules/ipvs.modules</span><br></pre></td></tr></table></figure><p>查看是否成功</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsmod | grep -e -ip_vs -e nf_conntrack_ipv4</span><br></pre></td></tr></table></figure><h2 id="所有节点kubernetes-repo源配置："><a href="#所有节点kubernetes-repo源配置：" class="headerlink" title="所有节点kubernetes.repo源配置："></a>所有节点<code>kubernetes.repo</code>源配置：</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/kubernetes.repo</span><br><span class="line"></span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br></pre></td></tr></table></figure><h2 id="k8s-安装"><a href="#k8s-安装" class="headerlink" title="k8s 安装"></a>k8s 安装</h2><p>master 节点 kubelet kubeadm 外 多安装一个 kubectl</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br></pre></td></tr></table></figure><p>master 节点 添加 kubectl 自动补全</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source &lt;(kubectl completion bash)</span><br></pre></td></tr></table></figure><p>node 节点 安装 kunelet kubeadm</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y kubelet kubeadm --disableexcludes=kubernetes</span><br></pre></td></tr></table></figure><p>配置 kubelet</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/kubelet</span><br><span class="line"></span><br><span class="line">KUBELET_CGROUP_ARGS=&quot;--cgroup-driver=systemd&quot;</span><br><span class="line">KUBE_PROXY_MODE=&quot;ipvs&quot;</span><br></pre></td></tr></table></figure><p>设置 kubelet 开机启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure><p>此时kubelet的状态，还是启动失败，通过journalctl -xeu kubelet能看到error信息；只有当执行了kubeadm init后才会启动成功。</p><p>拉取 kubeadm 默认配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm config print init-defaults &gt; ~/k8s-init-config.yaml</span><br></pre></td></tr></table></figure><p>更改 k8s.gcr.io 镜像下载地址，并下载</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/k8s-init-config.yaml</span><br><span class="line"></span><br><span class="line">imageRepository: registry.aliyuncs.com/google_containers</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm config images pull --config=~/k8s-init-config.yaml</span><br></pre></td></tr></table></figure><p>修改 &#x2F;etc&#x2F;containerd&#x2F;config.toml, 使 pause 和 k8s 下载下来的镜像保持一致</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sandbox_image = &quot;registry.aliyuncs.com/google_containers/pause:3.8&quot;</span><br></pre></td></tr></table></figure><p>重启 containerd</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart containerd</span><br></pre></td></tr></table></figure><h2 id="master-节点-初始化"><a href="#master-节点-初始化" class="headerlink" title="master 节点 初始化"></a>master 节点 初始化</h2><p>方式一</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/k8s-init-config.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">advertiseAddress: 10.0.0.1</span><br><span class="line"></span><br><span class="line">imageRepository: registry.aliyuncs.com/google_containers</span><br><span class="line"></span><br><span class="line">serviceSubnet: 10.55.0.0/16</span><br><span class="line">podSubnet: 10.99.0.0/16</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">--config=k8s-init-config.yaml \  </span><br><span class="line">--ignore-preflight-errors=swap \</span><br><span class="line">--upload-certs</span><br></pre></td></tr></table></figure><p>方式二</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address=10.0.0.1 \</span><br><span class="line">--apiserver-bind-port=6443  </span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">--service-cidr=10.55.0.0/16 \</span><br><span class="line">--pod-network-cidr=10.99.0.0/16</span><br><span class="line">--ignore-preflight-errors=swap \</span><br><span class="line">--upload-certs</span><br></pre></td></tr></table></figure><p>apiserver-advertise-address 如果配置的不是<code>ip</code>而是<code>api.server</code>,则需要在 所有节点的 <code>/etc/host</code> 添加 <code>10.0.0.1 apiserver.com</code>的解析</p><p>master 失败后</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重置kubeadm</span></span><br><span class="line">kubeadm reset -f</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除旧配置</span></span><br><span class="line">rm -fr  $HOME/.kube/config</span><br></pre></td></tr></table></figure><p>master 成功后</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf $HOME/.kube</span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config </span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure><p>master 节点 加入集群</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm join 10.0.0.1:6443 --token hzlzrr.uwuegx4locpu36oc \</span><br><span class="line">  --discovery-token-ca-cert-hash sha256:4cbe428cb3503277be9fbcf3a99de82a97397a624dd94d4270c4eed1b861f951 \</span><br><span class="line">  --control-plane --certificate-key 28b178f04afae3770aa92add0206650b2359dd61424f127a6d44142dd15a280d</span><br></pre></td></tr></table></figure><h2 id="node-节点-初始化"><a href="#node-节点-初始化" class="headerlink" title="node 节点 初始化"></a>node 节点 初始化</h2><p>node 节点 加入集群</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">该命令来自master安装成功后的最后两行信息</span></span><br><span class="line">kubeadm join 10.0.0.1:6443 --token hzlzrr.uwuegx4locpu36oc \</span><br><span class="line">  --discovery-token-ca-cert-hash sha256:4cbe428cb3503277be9fbcf3a99de82a97397a624dd94d4270c4eed1b861f951</span><br></pre></td></tr></table></figure><h2 id="master-节点-安装-网络插件"><a href="#master-节点-安装-网络插件" class="headerlink" title="master 节点 安装 网络插件"></a>master 节点 安装 网络插件</h2><p>选其一即可：calico 或 flannel 或 weave 网络插件<br>Calico</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f &quot;https://docs.projectcalico.org/manifests/calico.yaml&quot;</span><br></pre></td></tr></table></figure><p>Weave</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f &quot;https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d &#x27;\n&#x27;)&quot;</span><br></pre></td></tr></table></figure><h2 id="运维操作"><a href="#运维操作" class="headerlink" title="运维操作"></a>运维操作</h2><p>修改 端口 范围</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/kubernetes/manifests/kube-apiserver.yaml</span><br><span class="line">添加到如下位置</span><br><span class="line">- command:</span><br><span class="line">   - kube-apiserver</span><br><span class="line">   - --service-node-port-range=1-65535</span><br></pre></td></tr></table></figure><p>查看 token</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm token list</span><br></pre></td></tr></table></figure><p>重新创建 token</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">临时</span></span><br><span class="line">kubeadm token create --print-join-command</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">永久</span></span><br><span class="line">kubeadm token create --print-join-command --ttl 0</span><br></pre></td></tr></table></figure><p>查看discovery-token-ca-cert-hash 获取ca证书sha256编码hash值</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed &#x27;s/^.* //&#x27;</span><br></pre></td></tr></table></figure><p>删除 node 节点</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl delete nodes k8s-node01</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;基础环境配置&quot;&gt;&lt;a href=&quot;#基础环境配置&quot; class=&quot;headerlink&quot; title=&quot;基础环境配置&quot;&gt;&lt;/a&gt;基础环境配置&lt;/h2&gt;&lt;h3 id=&quot;节点规划&quot;&gt;&lt;a href=&quot;#节点规划&quot; class=&quot;headerlink&quot; title=&quot;节点规划&quot;&gt;&lt;/a&gt;节点规划&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;IP&lt;/th&gt;
&lt;th&gt;hostname&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;10.0.0.1&lt;/td&gt;
&lt;td&gt;k8s-master&lt;/td&gt;
&lt;td&gt;master 节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10.0.0.2&lt;/td&gt;
&lt;td&gt;k8s-node01&lt;/td&gt;
&lt;td&gt;node   节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10.0.0.3&lt;/td&gt;
&lt;td&gt;k8s-node02&lt;/td&gt;
&lt;td&gt;node   节点&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;基本配置&quot;&gt;&lt;a href=&quot;#基本配置&quot; class=&quot;headerlink&quot; title=&quot;基本配置&quot;&gt;&lt;/a&gt;基本配置&lt;/h3&gt;&lt;h4 id=&quot;所有节点-配置hosts，修改-x2F-etc-x2F-hosts如下：&quot;&gt;&lt;a href=&quot;#所有节点-配置hosts，修改-x2F-etc-x2F-hosts如下：&quot; class=&quot;headerlink&quot; title=&quot;所有节点 配置hosts，修改&amp;#x2F;etc&amp;#x2F;hosts如下：&quot;&gt;&lt;/a&gt;所有节点 配置hosts，修改&amp;#x2F;etc&amp;#x2F;hosts如下：&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;10.0.0.1 k8s-master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.0.0.2 k8s-node01&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.0.0.3 k8s-node02&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;所有节点-CentOS-初始化&quot;&gt;&lt;a href=&quot;#所有节点-CentOS-初始化&quot; class=&quot;headerlink&quot; title=&quot;所有节点 CentOS 初始化&quot;&gt;&lt;/a&gt;所有节点 CentOS 初始化&lt;/h4&gt;&lt;p&gt;详细步骤 回顾文章 &lt;a href=&quot;/2017/01/07/linux/initial/&quot;&gt;&amp;lt;&amp;lt; CentOS 初始化 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;所有节点-containerd-安装&quot;&gt;&lt;a href=&quot;#所有节点-containerd-安装&quot; class=&quot;headerlink&quot; title=&quot;所有节点 containerd 安装&quot;&gt;&lt;/a&gt;所有节点 containerd 安装&lt;/h4&gt;&lt;p&gt;详细步骤 回顾文章 &lt;a href=&quot;/2021/11/25/cncf/docker/containerd/&quot;&gt;&amp;lt;&amp;lt; containerd 安装 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="CNCF 云原生" scheme="http://jnan806.panpan.cloud/categories/CNCF-%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="containerd" scheme="http://jnan806.panpan.cloud/tags/containerd/"/>
    
    <category term="容器化" scheme="http://jnan806.panpan.cloud/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    <category term="kubernetes" scheme="http://jnan806.panpan.cloud/tags/kubernetes/"/>
    
    <category term="云原生" scheme="http://jnan806.panpan.cloud/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>containerd 安装</title>
    <link href="http://jnan806.panpan.cloud/2021/11/25/cncf/docker/containerd/"/>
    <id>http://jnan806.panpan.cloud/2021/11/25/cncf/docker/containerd/</id>
    <published>2021-11-25T02:21:44.000Z</published>
    <updated>2023-01-30T01:29:14.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载yum源"><a href="#下载yum源" class="headerlink" title="下载yum源"></a>下载<code>yum源</code></h1><p>推荐: 中科大 docker-ce yum 源</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo &gt;&gt; /etc/yum.repo.d/docker-ce.repo</span><br></pre></td></tr></table></figure><p>将<code>docker-ce.repo</code>中的<code>download.docker.com</code>替换成<code>mirrors.ustc.edu.cn/docker-ce</code></p><h1 id="安装-containerd"><a href="#安装-containerd" class="headerlink" title="安装 containerd"></a>安装 containerd</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><h1 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/containerd/</span><br><span class="line">containerd config default &gt; /etc/containerd/config.toml</span><br></pre></td></tr></table></figure><p>&#x2F;etc&#x2F;containerd&#x2F;config.toml</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. sandbox 修改为 国内 k8s.gcr.io 源</span><br><span class="line">2. </span><br><span class="line">      [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry]</span><br><span class="line">        config_path = &quot;/etc/containerd/certs.d&quot;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">      mkdir -p /etc/containerd/certs.d</span><br><span class="line">      </span><br><span class="line">      vim /etc/containerd/certs.d/docker.io/hosts.toml</span><br><span class="line">      [host.&quot;https://********.mirror.aliyuncs.com&quot;]</span><br><span class="line">        capabilities = [&quot;pull&quot;, &quot;resolve&quot;]</span><br><span class="line">        skip_verify = true</span><br><span class="line">      [host.&quot;https://registry.docker-cn.com&quot;]</span><br><span class="line">        capabilities = [&quot;pull&quot;, &quot;resolve&quot;]</span><br><span class="line">        skip_verify = true</span><br><span class="line">      </span><br><span class="line">      vim /etc/containerd/certs.d/gcr.io/hosts.toml</span><br><span class="line">      [host.&quot;https://registry.aliyuncs.com&quot;]</span><br><span class="line">        capabilities = [&quot;pull&quot;, &quot;resolve&quot;]</span><br><span class="line">        skip_verify = true</span><br><span class="line">      [host.&quot;https://gcr.mirrors.ustc.edu.cn&quot;]</span><br><span class="line">        capabilities = [&quot;pull&quot;, &quot;resolve&quot;]</span><br><span class="line">        skip_verify = true</span><br><span class="line">      </span><br><span class="line">      vim /etc/containerd/certs.d/quay.io/hosts.toml</span><br><span class="line">      [host.&quot;https://quay.mirrors.ustc.edu.cn&quot;]</span><br><span class="line">        capabilities = [&quot;pull&quot;, &quot;resolve&quot;]</span><br><span class="line">        skip_verify = true</span><br><span class="line"></span><br><span class="line">4. SystemdCgroup = true</span><br></pre></td></tr></table></figure><p>docker.io ：Docker Hub 官方镜像仓库，也是 Docker 默认的仓库<br>gcr.io、k8s.gcr.io ：谷歌镜像仓库, <code>k8s.gcr.io 等价于 gcr.io/google_containers</code>，endpoint仅支持 schema:&#x2F;&#x2F;IP:PORT,因此 k8s.gcr.io 不需配置<br>quay.io ：Red Hat 镜像仓库<br>ghcr.io ：GitHub 镜像仓库</p><p><code>ctr doesn&#39;t use CRI, so it doesn&#39;t read plugins.&quot;io.containerd.grpc.v1.cri&quot;</code><br>nerdctl, crictl 是使用contained的配置文件下载，你在配置文件里设置的mirror，是生效的。<br>如果你使用ctr去pull镜像，都是直接下载，无法设置mirror，也不会使用contained下的mirror设置</p><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable containerd</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start containerd</span><br></pre></td></tr></table></figure><p>安装 nerdctl<br>github上<code>containerd/nerdctl</code>下载full版本的<code>nerdctl</code></p><p>1 解压，后配置环境变量<br>2 创建软连接，使 &#x2F;opt&#x2F;cni&#x2F;bin 指向 nerdctl&#x2F;libexec&#x2F;cni<br>3 设置自动补全</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line">source &lt;(nerdctl completion bash)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">让其生效</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;下载yum源&quot;&gt;&lt;a href=&quot;#下载yum源&quot; class=&quot;headerlink&quot; title=&quot;下载yum源&quot;&gt;&lt;/a&gt;下载&lt;code&gt;yum源&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;推荐: 中科大 docker-ce yum 源&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo &amp;gt;&amp;gt; /etc/yum.repo.d/docker-ce.repo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将&lt;code&gt;docker-ce.repo&lt;/code&gt;中的&lt;code&gt;download.docker.com&lt;/code&gt;替换成&lt;code&gt;mirrors.ustc.edu.cn/docker-ce&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;安装-containerd&quot;&gt;&lt;a href=&quot;#安装-containerd&quot; class=&quot;headerlink&quot; title=&quot;安装 containerd&quot;&gt;&lt;/a&gt;安装 containerd&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install -y containerd.io docker-compose-plugin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;创建配置文件&quot;&gt;&lt;a href=&quot;#创建配置文件&quot; class=&quot;headerlink&quot; title=&quot;创建配置文件&quot;&gt;&lt;/a&gt;创建配置文件&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir -p /etc/containerd/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;containerd config default &amp;gt; /etc/containerd/config.toml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;#x2F;etc&amp;#x2F;containerd&amp;#x2F;config.toml&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. sandbox 修改为 国内 k8s.gcr.io 源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [plugins.&amp;quot;io.containerd.grpc.v1.cri&amp;quot;.registry]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        config_path = &amp;quot;/etc/containerd/certs.d&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      mkdir -p /etc/containerd/certs.d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      vim /etc/containerd/certs.d/docker.io/hosts.toml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [host.&amp;quot;https://********.mirror.aliyuncs.com&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        capabilities = [&amp;quot;pull&amp;quot;, &amp;quot;resolve&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        skip_verify = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [host.&amp;quot;https://registry.docker-cn.com&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        capabilities = [&amp;quot;pull&amp;quot;, &amp;quot;resolve&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        skip_verify = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      vim /etc/containerd/certs.d/gcr.io/hosts.toml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [host.&amp;quot;https://registry.aliyuncs.com&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        capabilities = [&amp;quot;pull&amp;quot;, &amp;quot;resolve&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        skip_verify = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [host.&amp;quot;https://gcr.mirrors.ustc.edu.cn&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        capabilities = [&amp;quot;pull&amp;quot;, &amp;quot;resolve&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        skip_verify = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      vim /etc/containerd/certs.d/quay.io/hosts.toml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [host.&amp;quot;https://quay.mirrors.ustc.edu.cn&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        capabilities = [&amp;quot;pull&amp;quot;, &amp;quot;resolve&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        skip_verify = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4. SystemdCgroup = true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="CNCF 云原生" scheme="http://jnan806.panpan.cloud/categories/CNCF-%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="docker" scheme="http://jnan806.panpan.cloud/tags/docker/"/>
    
    <category term="containerd" scheme="http://jnan806.panpan.cloud/tags/containerd/"/>
    
    <category term="容器化" scheme="http://jnan806.panpan.cloud/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud</title>
    <link href="http://jnan806.panpan.cloud/2020/03/05/springcloud/spring-cloud/"/>
    <id>http://jnan806.panpan.cloud/2020/03/05/springcloud/spring-cloud/</id>
    <published>2020-03-05T13:12:35.000Z</published>
    <updated>2020-03-05T13:21:54.000Z</updated>
    
    
    
    
    <category term="Spring-Cloud" scheme="http://jnan806.panpan.cloud/categories/Spring-Cloud/"/>
    
    
    <category term="java" scheme="http://jnan806.panpan.cloud/tags/java/"/>
    
    <category term="spring" scheme="http://jnan806.panpan.cloud/tags/spring/"/>
    
    <category term="spring-boot" scheme="http://jnan806.panpan.cloud/tags/spring-boot/"/>
    
    <category term="spring-cloud" scheme="http://jnan806.panpan.cloud/tags/spring-cloud/"/>
    
    <category term="微服务" scheme="http://jnan806.panpan.cloud/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud-alibaba</title>
    <link href="http://jnan806.panpan.cloud/2020/03/05/springcloud/springcloud-alibaba/spring-cloud-alibaba/"/>
    <id>http://jnan806.panpan.cloud/2020/03/05/springcloud/springcloud-alibaba/spring-cloud-alibaba/</id>
    <published>2020-03-05T13:12:35.000Z</published>
    <updated>2020-03-05T13:21:54.000Z</updated>
    
    
    
    
    <category term="Spring-Cloud" scheme="http://jnan806.panpan.cloud/categories/Spring-Cloud/"/>
    
    
    <category term="java" scheme="http://jnan806.panpan.cloud/tags/java/"/>
    
    <category term="spring" scheme="http://jnan806.panpan.cloud/tags/spring/"/>
    
    <category term="spring-boot" scheme="http://jnan806.panpan.cloud/tags/spring-boot/"/>
    
    <category term="spring-cloud" scheme="http://jnan806.panpan.cloud/tags/spring-cloud/"/>
    
    <category term="微服务" scheme="http://jnan806.panpan.cloud/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="spring-cloud-alibaba" scheme="http://jnan806.panpan.cloud/tags/spring-cloud-alibaba/"/>
    
    <category term="alibaba" scheme="http://jnan806.panpan.cloud/tags/alibaba/"/>
    
  </entry>
  
  <entry>
    <title>ssl</title>
    <link href="http://jnan806.panpan.cloud/2019/08/25/tools/ssl/ssl/"/>
    <id>http://jnan806.panpan.cloud/2019/08/25/tools/ssl/ssl/</id>
    <published>2019-08-25T12:45:37.000Z</published>
    <updated>2022-09-06T15:06:06.479Z</updated>
    
    <content type="html"><![CDATA[<p>安装了 <code>openssl</code> 之后，执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl req -x509 -newkey rsa:2048 -nodes -days 36500 -keyout ssl/<span class="variable">$&#123;fileName&#125;</span>.key -out ssl/<span class="variable">$&#123;fileName&#125;</span>.crt </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;安装了 &lt;code&gt;openssl&lt;/code&gt; 之后，执行&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;openssl req -x509 -newkey rsa:2048 -nodes -days 36500 -keyout ssl/&lt;span class=&quot;variable&quot;&gt;$&amp;#123;fileName&amp;#125;&lt;/span&gt;.key -out ssl/&lt;span class=&quot;variable&quot;&gt;$&amp;#123;fileName&amp;#125;&lt;/span&gt;.crt &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Tools" scheme="http://jnan806.panpan.cloud/categories/Tools/"/>
    
    
    <category term="https" scheme="http://jnan806.panpan.cloud/tags/https/"/>
    
    <category term="ssl自签证书" scheme="http://jnan806.panpan.cloud/tags/ssl%E8%87%AA%E7%AD%BE%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>spring 利器 IOC</title>
    <link href="http://jnan806.panpan.cloud/2019/03/05/spring/spring-ioc/"/>
    <id>http://jnan806.panpan.cloud/2019/03/05/spring/spring-ioc/</id>
    <published>2019-03-05T13:12:35.000Z</published>
    <updated>2019-03-05T13:21:54.000Z</updated>
    
    
    
    
    <category term="Spring" scheme="http://jnan806.panpan.cloud/categories/Spring/"/>
    
    
    <category term="java" scheme="http://jnan806.panpan.cloud/tags/java/"/>
    
    <category term="spring" scheme="http://jnan806.panpan.cloud/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring 脚手架 springboot</title>
    <link href="http://jnan806.panpan.cloud/2019/03/05/spring/springboot/spring-boot/"/>
    <id>http://jnan806.panpan.cloud/2019/03/05/spring/springboot/spring-boot/</id>
    <published>2019-03-05T13:12:35.000Z</published>
    <updated>2019-03-05T13:21:54.000Z</updated>
    
    
    
    
    <category term="Spring" scheme="http://jnan806.panpan.cloud/categories/Spring/"/>
    
    
    <category term="java" scheme="http://jnan806.panpan.cloud/tags/java/"/>
    
    <category term="spring" scheme="http://jnan806.panpan.cloud/tags/spring/"/>
    
    <category term="spring-boot" scheme="http://jnan806.panpan.cloud/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="http://jnan806.panpan.cloud/2018/11/25/cncf/docker/docker/"/>
    <id>http://jnan806.panpan.cloud/2018/11/25/cncf/docker/docker/</id>
    <published>2018-11-25T04:21:44.000Z</published>
    <updated>2022-09-06T15:05:00.179Z</updated>
    
    <content type="html"><![CDATA[<p>cd &#x2F;etc&#x2F;yum.repos.d&#x2F;</p><p>wget <a href="https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p><p>yum remove -y docker docker-client docker-client-latest docker-common  docker-latest docker-latest-logrotate docker-logrotate docker-engine<br>yum remove -y yum-utils device-mapper-persistent-data lvm2<br>yum remove -y docker-ce docker-compose</p><p>yum install -y yum-utils device-mapper-persistent-data lvm2 epel-release<br>yum install -y docker-ce docker-compose</p><p>#某一版本之后，yum 貌似移除了docker-compose，需要到github官网下载二进制<br>#配置环境变量，或者 copy into &#x2F;usr&#x2F;bin<br>#Rename the relevant binary for your OS to docker-compose and copy it to $HOME&#x2F;.docker&#x2F;cli-plugins</p><h1 id="腾讯云-docker-hub-镜像"><a href="#腾讯云-docker-hub-镜像" class="headerlink" title="腾讯云 docker hub 镜像"></a>腾讯云 docker hub 镜像</h1><h1 id="export-REGISTRY-MIRROR-x3D-”https-mirror-ccs-tencentyun-com-quot"><a href="#export-REGISTRY-MIRROR-x3D-”https-mirror-ccs-tencentyun-com-quot" class="headerlink" title="export REGISTRY_MIRROR&#x3D;”https://mirror.ccs.tencentyun.com&quot;"></a>export REGISTRY_MIRROR&#x3D;”<a href="https://mirror.ccs.tencentyun.com&quot;/">https://mirror.ccs.tencentyun.com&quot;</a></h1><h1 id="DaoCloud-镜像"><a href="#DaoCloud-镜像" class="headerlink" title="DaoCloud 镜像"></a>DaoCloud 镜像</h1><h1 id="export-REGISTRY-MIRROR-x3D-”http-f1361db2-m-daocloud-io-quot"><a href="#export-REGISTRY-MIRROR-x3D-”http-f1361db2-m-daocloud-io-quot" class="headerlink" title="export REGISTRY_MIRROR&#x3D;”http://f1361db2.m.daocloud.io&quot;"></a>export REGISTRY_MIRROR&#x3D;”<a href="http://f1361db2.m.daocloud.io&quot;/">http://f1361db2.m.daocloud.io&quot;</a></h1><h1 id="华为云镜像"><a href="#华为云镜像" class="headerlink" title="华为云镜像"></a>华为云镜像</h1><h1 id="export-REGISTRY-MIRROR-x3D-”https-05f073ad3c0010ea0f4bc00b7105ec20-mirror-swr-myhuaweicloud-com-quot"><a href="#export-REGISTRY-MIRROR-x3D-”https-05f073ad3c0010ea0f4bc00b7105ec20-mirror-swr-myhuaweicloud-com-quot" class="headerlink" title="export REGISTRY_MIRROR&#x3D;”https://05f073ad3c0010ea0f4bc00b7105ec20.mirror.swr.myhuaweicloud.com&quot;"></a>export REGISTRY_MIRROR&#x3D;”<a href="https://05f073ad3c0010ea0f4bc00b7105ec20.mirror.swr.myhuaweicloud.com&quot;/">https://05f073ad3c0010ea0f4bc00b7105ec20.mirror.swr.myhuaweicloud.com&quot;</a></h1><h1 id="阿里云-docker-hub-镜像"><a href="#阿里云-docker-hub-镜像" class="headerlink" title="阿里云 docker hub 镜像"></a>阿里云 docker hub 镜像</h1><p>export REGISTRY_MIRROR&#x3D;<a href="https://registry.cn-hangzhou.aliyuncs.com/">https://registry.cn-hangzhou.aliyuncs.com</a></p><h1 id="Jiajiangnan"><a href="#Jiajiangnan" class="headerlink" title="Jiajiangnan"></a>Jiajiangnan</h1><p><a href="https://t92txq8i.mirror.aliyuncs.com/">https://t92txq8i.mirror.aliyuncs.com</a></p><p>mkdir -p &#x2F;etc&#x2F;docker</p><p>vim &#x2F;etc&#x2F;docker&#x2F;daemon.json<br>{<br>“registry-mirrors”:[“<a href="https://registry.cn-hangzhou.aliyuncs.com&quot;/">https://registry.cn-hangzhou.aliyuncs.com&quot;</a>, “<a href="https://registry.docker-cn.com&quot;]">https://registry.docker-cn.com&quot;]</a>,<br>“insecure-registries”:[“node03.registry.com:5000”],</p><h1 id="“exec-opts”-“native-cgroupdriver-x3D-systemd”"><a href="#“exec-opts”-“native-cgroupdriver-x3D-systemd”" class="headerlink" title="“exec-opts”:[“native.cgroupdriver&#x3D;systemd”],"></a>“exec-opts”:[“native.cgroupdriver&#x3D;systemd”],</h1><h1 id="“graph”-”-x2F-home-x2F-docker-ce”"><a href="#“graph”-”-x2F-home-x2F-docker-ce”" class="headerlink" title="“graph”:”&#x2F;home&#x2F;docker-ce”,"></a>“graph”:”&#x2F;home&#x2F;docker-ce”,</h1><p>“data-root”:”&#x2F;home&#x2F;docker-ce”,<br>“log-driver”:”json-file”,<br>“log-opts”:{“max-size”:”50m”, “max-file”:”10”}<br>}</p><p>vim &#x2F;etc&#x2F;sysctl.conf<br>#net.bridge.bridge-nf-call-ip6tables &#x3D; 1<br>net.bridge.bridge-nf-call-iptables &#x3D; 1<br>net.bridge.bridge-nf-call-arptables &#x3D; 1<br>net.ipv4.ip_forward &#x3D; 1</p><p>vm.swappiness&#x3D;0</p><p>systemctl daemon-reload<br>systemctl start docker<br>systemctl enable docker</p><p>yum install -y docker-registry</p><p>vim  &#x2F;etc&#x2F;docker-distribution&#x2F;registry&#x2F;config.yml</p><p>systemctl start docker-distribution<br>systemctl enable docker-distribution</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;cd &amp;#x2F;etc&amp;#x2F;yum.repos.d&amp;#x2F;&lt;/p&gt;
&lt;p&gt;wget &lt;a href=&quot;https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo&quot;&gt;https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;yum remove -y docker docker-client docker-client-latest docker-common  docker-latest docker-latest-logrotate docker-logrotate docker-engine&lt;br&gt;yum remove -y yum-utils device-mapper-persistent-data lvm2&lt;br&gt;yum remove -y docker-ce docker-compose&lt;/p&gt;
&lt;p&gt;yum install -y yum-utils device-mapper-persistent-data lvm2 epel-release&lt;br&gt;yum install -y docker-ce docker-compose&lt;/p&gt;
&lt;p&gt;#某一版本之后，yum 貌似移除了docker-compose，需要到github官网下载二进制&lt;br&gt;#配置环境变量，或者 copy into &amp;#x2F;usr&amp;#x2F;bin&lt;br&gt;#Rename the relevant binary for your OS to docker-compose and copy it to $HOME&amp;#x2F;.docker&amp;#x2F;cli-plugins&lt;/p&gt;
&lt;h1 id=&quot;腾讯云-docker-hub-镜像&quot;&gt;&lt;a href=&quot;#腾讯云-docker-hub-镜像&quot; class=&quot;headerlink&quot; title=&quot;腾讯云 docker hub 镜像&quot;&gt;&lt;/a&gt;腾讯云 docker hub 镜像&lt;/h1&gt;&lt;h1 id=&quot;export-REGISTRY-MIRROR-x3D-”https-mirror-ccs-tencentyun-com-quot&quot;&gt;&lt;a href=&quot;#export-REGISTRY-MIRROR-x3D-”https-mirror-ccs-tencentyun-com-quot&quot; class=&quot;headerlink&quot; title=&quot;export REGISTRY_MIRROR&amp;#x3D;”https://mirror.ccs.tencentyun.com&amp;quot;&quot;&gt;&lt;/a&gt;export REGISTRY_MIRROR&amp;#x3D;”&lt;a href=&quot;https://mirror.ccs.tencentyun.com&amp;quot;/&quot;&gt;https://mirror.ccs.tencentyun.com&amp;quot;&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;DaoCloud-镜像&quot;&gt;&lt;a href=&quot;#DaoCloud-镜像&quot; class=&quot;headerlink&quot; title=&quot;DaoCloud 镜像&quot;&gt;&lt;/a&gt;DaoCloud 镜像&lt;/h1&gt;&lt;h1 id=&quot;export-REGISTRY-MIRROR-x3D-”http-f1361db2-m-daocloud-io-quot&quot;&gt;&lt;a href=&quot;#export-REGISTRY-MIRROR-x3D-”http-f1361db2-m-daocloud-io-quot&quot; class=&quot;headerlink&quot; title=&quot;export REGISTRY_MIRROR&amp;#x3D;”http://f1361db2.m.daocloud.io&amp;quot;&quot;&gt;&lt;/a&gt;export REGISTRY_MIRROR&amp;#x3D;”&lt;a href=&quot;http://f1361db2.m.daocloud.io&amp;quot;/&quot;&gt;http://f1361db2.m.daocloud.io&amp;quot;&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;华为云镜像&quot;&gt;&lt;a href=&quot;#华为云镜像&quot; class=&quot;headerlink&quot; title=&quot;华为云镜像&quot;&gt;&lt;/a&gt;华为云镜像&lt;/h1&gt;</summary>
    
    
    
    <category term="CNCF 云原生" scheme="http://jnan806.panpan.cloud/categories/CNCF-%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="docker" scheme="http://jnan806.panpan.cloud/tags/docker/"/>
    
    <category term="容器化" scheme="http://jnan806.panpan.cloud/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes</title>
    <link href="http://jnan806.panpan.cloud/2018/11/25/cncf/kubernetes/kubernetes/"/>
    <id>http://jnan806.panpan.cloud/2018/11/25/cncf/kubernetes/kubernetes/</id>
    <published>2018-11-25T04:21:44.000Z</published>
    <updated>2022-09-20T12:05:54.354Z</updated>
    
    <content type="html"><![CDATA[<p>cd &#x2F;etc&#x2F;yum.repos.d&#x2F;</p><p>vim kubernetes.repo<br>[kubernetes]<br>name&#x3D;Kubernetes<br>baseurl&#x3D;<a href="http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64">http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</a><br>enabled&#x3D;1<br>gpgcheck&#x3D;0<br>repo_gpgcheck&#x3D;0<br>gpgkey&#x3D;<a href="http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg">http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</a><br><a href="http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg">http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</a></p><p>yum install -y bash-completion</p><h1 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h1><p>yum remove -y kubelet kubeadm kubectl</p><p>yum install -y kubelet-1.14.0  &amp;&amp; yum install -y  kubeadm-1.14.0  kubectl-1.14.0</p><p>vim ~&#x2F;.bashrc<br>alias v&#x3D;vim<br>alias k&#x3D;kubectl<br>alias kdp&#x3D;‘kubectl delete pod –force –grace-period&#x3D;0’<br>alias kn&#x3D;‘kubectl config set-context —current –namespace’<br>source &lt; (kubectl completion bash)<br>completion -F __start_kubectl k</p><p>systemctl enable kubelet</p><p>vim &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf<br>net.bridge.bridge-nf-call-iptables &#x3D; 1<br>#net.bridge.bridge-nf-call-ip6tables &#x3D; 1<br>net.bridge.bridge-nf-call-arptables &#x3D; 1<br>net.ipv4.ip_forward &#x3D; 1</p><p>vm.swappiness&#x3D;0</p><p>sudo sysctl -p &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf</p><p>vim &#x2F;etc&#x2F;sysconfig&#x2F;kubelet<br>KUBELET_EXTRA_ARGS&#x3D;”–fail-swap-on&#x3D;false”</p><p>systemctl daemon-reload &amp;&amp; systemctl restart docker &amp;&amp; systemctl restart kubelet</p><p>cd ~<br>kubeadm config print init-defaults &gt; &#x2F;root&#x2F;kubeadm-config.yaml</p><p>vim &#x2F;root&#x2F;kubeadm-master.config<br>–advertiseAddress: 192.168.86.11<br>–name: node51<br>–controlPlaneEndpoint: k8s.apiserver.com:6443(只有master需要)<br>–image-repository  registry.aliyuncs.com&#x2F;google_containers<br>– podSubnet: 10.88.0.0&#x2F;16<br>–pod-network-cidr&#x3D;10.244.0.0&#x2F;16 –service-cidr&#x3D;10.96.0.0&#x2F;12</p><h1 id="提前拉取镜像"><a href="#提前拉取镜像" class="headerlink" title="提前拉取镜像"></a>提前拉取镜像</h1><p>kubeadm config images pull –config &#x2F;root&#x2F;kubeadm-config.yaml</p><h1 id="master-初始化集群"><a href="#master-初始化集群" class="headerlink" title="master 初始化集群"></a>master 初始化集群</h1><p>kubeadm init –config &#x2F;root&#x2F;kubeadm-config.yaml –ignore-preflight-errors&#x3D;Swap<br>#或者直接以参数形式<br>kubeadm init –image-repository registry.aliyuncs.com&#x2F;google_containers –kubernetes-version&#x3D;v1.14.0 –pod-network-cidr&#x3D;10.244.0.0&#x2F;16 –service-cidr&#x3D;10.96.0.0&#x2F;12 –advertiseAddress: 192.168.86.11</p><p>#失败后的处理方式<br>journalctl -xefu kubelet<br>kubeadm reset -f</p><p>#配置<br>cd &#x2F;root<br>rm -rf $HOME&#x2F;.kube<br>mkdir -p $HOME&#x2F;.kube<br>sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf  $HOME&#x2F;.kube&#x2F;config<br>sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config<br>echo “export KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf” &gt;&gt; ~&#x2F;.bash_profile<br>source  ~&#x2F;.bash_profile</p><p>网络方案一、calico<br>cd ~<br>mkdir calico<br>cd calicao<br>wget <a href="https://kuboard.cn/install-script/v1.20.x/calico-operator.yaml">https://kuboard.cn/install-script/v1.20.x/calico-operator.yaml</a><br>wget <a href="https://kuboard.cn/install-script/v1.20.x/calico-custom-resources.yaml">https://kuboard.cn/install-script/v1.20.x/calico-custom-resources.yaml</a><br>kubectl apply -f calico-operator.yaml<br>sed -i “s#192.168.0.0&#x2F;16#${POD_SUBNET}#” calico-custom-resources.yaml<br>kubectl apply -f calico-custom-resources.yaml</p><p>网络方案二、flannel<br>cd ~<br>mkdir flannel<br>cd flannel<br>wget <a href="https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml">https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</a></p><h1 id="kube-flannel-yml-的-data-net-conf-json-Network-需要与-kubeadm-config-yaml-中的-networking-pod-network-cidr-保持一致"><a href="#kube-flannel-yml-的-data-net-conf-json-Network-需要与-kubeadm-config-yaml-中的-networking-pod-network-cidr-保持一致" class="headerlink" title="kube-flannel.yml 的 data.net-conf.json.Network 需要与 kubeadm-config.yaml 中的 networking.pod-network-cidr 保持一致"></a>kube-flannel.yml 的 data.net-conf.json.Network 需要与 kubeadm-config.yaml 中的 networking.pod-network-cidr 保持一致</h1><p>kubectl apply -f kube-flannel.yml<br>#若卡住不动，可以查看pod信息，然后下载相关镜像<br>docker pull quay.io&#x2F;coreos&#x2F;flannel:v0.11.0-amd64<br>#如果多网卡则修改yaml文件<br>args:</p><ul><li>–masq</li><li>–kube-subnet-mgr</li><li>–iface&#x3D;enp0s8（网卡名）</li></ul><p>#执行<br>kubectl apply -f kube-flannel.yml<br>kubectl get pods -n kube-system</p><h1 id="node节点"><a href="#node节点" class="headerlink" title="node节点"></a>node节点</h1><p>mkdir -p &#x2F;etc&#x2F;kubernetes<br>mkdir -p &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd</p><p>#token有效期是有限的（默认24h），如果旧的token过期，可以使用命令重新创建一条token<br>kubeadm token create –print-join-command</p><p>#加入node节点<br>kubeadm join k8s.apiserver.com:6443 –token 05eoyj.6x9dhm9q86u2xfmc –discovery-token-ca-cert-hash sha256:c6bd85e6c2b3ce88b9764e3462d4d0cbaab091a32522f685310ec3501683a756 –ignore-preflight-errors&#x3D;Swap</p><p>#加入master节点<br>scp -r [master]&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.* &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;<br>scp -r [master]&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;sa.* &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;<br>scp -r [master]&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;front-proxy-ca.* &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;<br>scp -r [master]&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;ca.* &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;<br>scp -r [master]&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf &#x2F;etc&#x2F;kubernetes&#x2F;<br>kubeadm join k8s.apiserver.com:6443 –token 05eoyj.6x9dhm9q86u2xfmc –discovery-token-ca-cert-hash sha256:c6bd85e6c2b3ce88b9764e3462d4d0cbaab091a32522f685310ec3501683a756 –ignore-preflight-errors&#x3D;Swap –experimental-control-plane</p><p>#移除ndoe节点<br>#master上执行<br>kubectl delete node node13<br>#node上执行<br>kubeadm reset -f<br>ifconfig cni0 down &amp;&amp; ip link delete cni0<br>ifconfig flannel.1 down &amp;&amp; ip link delete flannel.1<br>rm -rf &#x2F;var&#x2F;lib&#x2F;cni&#x2F;<br>rm -rf &#x2F;etc&#x2F;kubernetes<br>rm -rf &#x2F;root&#x2F;.kube&#x2F;config<br>rm -rf &#x2F;var&#x2F;lib&#x2F;etcd</p><p>更新证书时间<br>kubeadm alpha certs renew all</p><p>查看证书时间<br>kubeadm alpha certs check-expiration</p><p>vi &#x2F;etc&#x2F;kubernetes&#x2F;manifests&#x2F;kube-apiserver.yaml<br>添加到如下位置就行了</p><ul><li>command:<ul><li>kube-apiserver</li><li>–service-node-port-range&#x3D;1-65535</li></ul></li></ul><p>1.21之后，get cs （ComponentStatus） 报错<br>vi &#x2F;etc&#x2F;kubernetes&#x2F;manifests&#x2F;kube-scheduler.yaml<br>注释掉 port&#x3D;0<br>vi &#x2F;etc&#x2F;kubernetes&#x2F;manifests&#x2F;kube-controller-manager.yaml<br>注释掉 port&#x3D;0</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;cd &amp;#x2F;etc&amp;#x2F;yum.repos.d&amp;#x2F;&lt;/p&gt;
&lt;p&gt;vim kubernetes.repo&lt;br&gt;[kubernetes]&lt;br&gt;name&amp;#x3D;Kubernetes&lt;br&gt;baseurl&amp;#x3D;&lt;a href=&quot;http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64&quot;&gt;http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64&lt;/a&gt;&lt;br&gt;enabled&amp;#x3D;1&lt;br&gt;gpgcheck&amp;#x3D;0&lt;br&gt;repo_gpgcheck&amp;#x3D;0&lt;br&gt;gpgkey&amp;#x3D;&lt;a href=&quot;http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg&quot;&gt;http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg&quot;&gt;http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;yum install -y bash-completion&lt;/p&gt;
&lt;h1 id=&quot;卸载旧版本&quot;&gt;&lt;a href=&quot;#卸载旧版本&quot; class=&quot;headerlink&quot; title=&quot;卸载旧版本&quot;&gt;&lt;/a&gt;卸载旧版本&lt;/h1&gt;&lt;p&gt;yum remove -y kubelet kubeadm kubectl&lt;/p&gt;
&lt;p&gt;yum install -y kubelet-1.14.0  &amp;amp;&amp;amp; yum install -y  kubeadm-1.14.0  kubectl-1.14.0&lt;/p&gt;
&lt;p&gt;vim ~&amp;#x2F;.bashrc&lt;br&gt;alias v&amp;#x3D;vim&lt;br&gt;alias k&amp;#x3D;kubectl&lt;br&gt;alias kdp&amp;#x3D;‘kubectl delete pod –force –grace-period&amp;#x3D;0’&lt;br&gt;alias kn&amp;#x3D;‘kubectl config set-context —current –namespace’&lt;br&gt;source &amp;lt; (kubectl completion bash)&lt;br&gt;completion -F __start_kubectl k&lt;/p&gt;
&lt;p&gt;systemctl enable kubelet&lt;/p&gt;
&lt;p&gt;vim &amp;#x2F;etc&amp;#x2F;sysctl.d&amp;#x2F;k8s.conf&lt;br&gt;net.bridge.bridge-nf-call-iptables &amp;#x3D; 1&lt;br&gt;#net.bridge.bridge-nf-call-ip6tables &amp;#x3D; 1&lt;br&gt;net.bridge.bridge-nf-call-arptables &amp;#x3D; 1&lt;br&gt;net.ipv4.ip_forward &amp;#x3D; 1&lt;/p&gt;
&lt;p&gt;vm.swappiness&amp;#x3D;0&lt;/p&gt;</summary>
    
    
    
    <category term="CNCF 云原生" scheme="http://jnan806.panpan.cloud/categories/CNCF-%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="容器化" scheme="http://jnan806.panpan.cloud/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    <category term="kubernetes" scheme="http://jnan806.panpan.cloud/tags/kubernetes/"/>
    
    <category term="云原生" scheme="http://jnan806.panpan.cloud/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>开源社区中的 &quot;黑话&quot;</title>
    <link href="http://jnan806.panpan.cloud/2017/05/12/tools/git/phrase/"/>
    <id>http://jnan806.panpan.cloud/2017/05/12/tools/git/phrase/</id>
    <published>2017-05-12T12:23:23.000Z</published>
    <updated>2017-05-12T13:03:19.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="left">缩写</th><th align="left">全称</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">WIP</td><td align="left">Work In Progress</td><td align="left">正在进行中</td></tr><tr><td align="left">PR</td><td align="left">Pull Request</td><td align="left">请求拉取自己的代码, 通常指请求合并</td></tr><tr><td align="left">LGTM &#x2F; SGTM</td><td align="left">Looks&#x2F;Sounds Good To Me</td><td align="left">Riview 完别人的 PR，没有问题</td></tr><tr><td align="left">PTAL</td><td align="left">Please Take A Look</td><td align="left">帮我看下，请别人 review 自己的 PR</td></tr><tr><td align="left">RFC</td><td align="left">Request For Comments</td><td align="left">我们来一起讨论下</td></tr><tr><td align="left">ACK</td><td align="left">Acknowledgement</td><td align="left">我接受</td></tr><tr><td align="left">NACK &#x2F; NAK</td><td align="left">Negative Acknowledgement</td><td align="left">我不同意</td></tr><tr><td align="left">TBR</td><td align="left">To Be Reviewed</td><td align="left">提示维护者进行 review</td></tr><tr><td align="left">TBD</td><td align="left">To Be Done &#x2F; Defined &#x2F; Discussed &#x2F; Decided &#x2F; Determined</td><td align="left">根据语境不同意义有所区别，但一般都是还没搞定的意思</td></tr><tr><td align="left">CC</td><td align="left">Carbon Copy</td><td align="left">一般代表抄送别人的意思</td></tr><tr><td align="left">IIRC</td><td align="left">If I Remember Correctly</td><td align="left">如果我没记错</td></tr><tr><td align="left">TL;DR</td><td align="left">Too Long; Didn’t Read</td><td align="left">太长懒得看。也有文档在做简略描述之前会写这么一句</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;缩写&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;全称&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;WIP&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Work In Progress&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;正在进行中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;PR&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Pull Request&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;请求拉取自己的代码, 通常指请求合并&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;LGTM &amp;#x2F; SGTM&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Looks&amp;#x2F;Sounds Good To Me&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Riview 完别人的 PR，没有问题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;PTAL&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Please Take A Look&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;帮我看下，请别人 review 自己的 PR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;RFC&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Request For Comments&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;我们来一起讨论下&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;ACK&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Acknowledgement&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;我接受&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;NACK &amp;#x2F; NAK&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Negative Acknowledgement&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;我不同意&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;TBR&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;To Be Reviewed&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;提示维护者进行 review&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;TBD&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;To Be Done &amp;#x2F; Defined &amp;#x2F; Discussed &amp;#x2F; Decided &amp;#x2F; Determined&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;根据语境不同意义有所区别，但一般都是还没搞定的意思&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;CC&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Carbon Copy&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;一般代表抄送别人的意思&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;IIRC&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;If I Remember Correctly&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;如果我没记错&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;TL;DR&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Too Long; Didn’t Read&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;太长懒得看。也有文档在做简略描述之前会写这么一句&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</summary>
    
    
    
    <category term="Tools" scheme="http://jnan806.panpan.cloud/categories/Tools/"/>
    
    
    <category term="git" scheme="http://jnan806.panpan.cloud/tags/git/"/>
    
    <category term="开源社区" scheme="http://jnan806.panpan.cloud/tags/%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA/"/>
    
  </entry>
  
  <entry>
    <title>nexus</title>
    <link href="http://jnan806.panpan.cloud/2017/05/12/tools/nexus/nexus/"/>
    <id>http://jnan806.panpan.cloud/2017/05/12/tools/nexus/nexus/</id>
    <published>2017-05-12T12:23:23.000Z</published>
    <updated>2017-05-12T13:03:19.000Z</updated>
    
    
    
    
    <category term="Tools" scheme="http://jnan806.panpan.cloud/categories/Tools/"/>
    
    
    <category term="nexus" scheme="http://jnan806.panpan.cloud/tags/nexus/"/>
    
    <category term="中央仓库" scheme="http://jnan806.panpan.cloud/tags/%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 常用命令</title>
    <link href="http://jnan806.panpan.cloud/2017/01/07/linux/command/"/>
    <id>http://jnan806.panpan.cloud/2017/01/07/linux/command/</id>
    <published>2017-01-07T10:34:12.000Z</published>
    <updated>2022-09-06T15:05:34.618Z</updated>
    
    <content type="html"><![CDATA[<p>启动时内核列表配置文件：CentOS7<br>cat &#x2F;boot&#x2F;grub2&#x2F;grub.cfg | grep menuentry</p><p>挂载cd&#x2F;vcd<br>mount -o exec &#x2F;dev&#x2F;cdrom &#x2F;media&#x2F;cdrom</p><p>ls &#x2F;mnt&#x2F;hgfs<br>vmware-hgfsclient<br>mount -t vmhgfs .host:&#x2F;shared &#x2F;mnt&#x2F;hgfs</p><p>查看新磁盘<br>fdisk -l<br>1.进入fdisk模式</p><p>&#x2F;sbin&#x2F;fdisk &#x2F;dev&#x2F;（设备）<br>2.输入n进行分区<br>n</p><p>这里有两个选项：(一般选择e，这里我选择的p。)<br>p: 主分区 linux上主分区最多能有4个<br>e:扩展分区 linux上扩展分区只能有1个，扩展分区创建后不能直接使用，还要在扩展分区上创建逻辑分区。</p><p>p</p><p>w</p><p>fdisk -l<br>mkfs.xfs &#x2F;dev&#x2F;（设备） -f</p><p>mount  &#x2F;dev&#x2F;（设备） &#x2F;home</p><p>df -h</p><p>blkid</p><p>vim &#x2F;etc&#x2F;fstab<br>UUID&#x3D;dd660379-48e2-4d06-b793-aedda00423c0  &#x2F;home  xfs  defaults  1  1</p><p>查看磁盘使用<br>lsblk<br>查看要扩容的<br>vgs<br>扩容<br>pvcreate &#x2F;dev&#x2F;vdb<br>vgextend rhel &#x2F;dev&#x2F;vdb<br>lvextend -L +99.99G &#x2F;dev&#x2F;mapper&#x2F;rhel-home<br>xfs_growfs &#x2F;dev&#x2F;mapper&#x2F;rhel-home</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;启动时内核列表配置文件：CentOS7&lt;br&gt;cat &amp;#x2F;boot&amp;#x2F;grub2&amp;#x2F;grub.cfg | grep menuentry&lt;/p&gt;
&lt;p&gt;挂载cd&amp;#x2F;vcd&lt;br&gt;mount -o exec &amp;#x2F;dev&amp;#x2F;cdrom &amp;#x2F;media&amp;#x2F;cdrom&lt;/p&gt;
&lt;p&gt;ls &amp;#x2F;mnt&amp;#x2F;hgfs&lt;br&gt;vmware-hgfsclient&lt;br&gt;mount -t vmhgfs .host:&amp;#x2F;shared &amp;#x2F;mnt&amp;#x2F;hgfs&lt;/p&gt;
&lt;p&gt;查看新磁盘&lt;br&gt;fdisk -l&lt;br&gt;1.进入fdisk模式&lt;/p&gt;
&lt;p&gt;&amp;#x2F;sbin&amp;#x2F;fdisk &amp;#x2F;dev&amp;#x2F;（设备）&lt;br&gt;2.输入n进行分区&lt;br&gt;n&lt;/p&gt;
&lt;p&gt;这里有两个选项：(一般选择e，这里我选择的p。)&lt;br&gt;p: 主分区 linux上主分区最多能有4个&lt;br&gt;e:扩展分区 linux上扩展分区只能有1个，扩展分区创建后不能直接使用，还要在扩展分区上创建逻辑分区。&lt;/p&gt;
&lt;p&gt;p&lt;/p&gt;
&lt;p&gt;w&lt;/p&gt;
&lt;p&gt;fdisk -l&lt;br&gt;mkfs.xfs &amp;#x2F;dev&amp;#x2F;（设备） -f&lt;/p&gt;
&lt;p&gt;mount  &amp;#x2F;dev&amp;#x2F;（设备） &amp;#x2F;home&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://jnan806.panpan.cloud/categories/Linux/"/>
    
    
    <category term="linux" scheme="http://jnan806.panpan.cloud/tags/linux/"/>
    
    <category term="CentOS" scheme="http://jnan806.panpan.cloud/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 初始化</title>
    <link href="http://jnan806.panpan.cloud/2017/01/07/linux/initial/"/>
    <id>http://jnan806.panpan.cloud/2017/01/07/linux/initial/</id>
    <published>2017-01-07T08:05:03.000Z</published>
    <updated>2020-04-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="yum源-与-apt源"><a href="#yum源-与-apt源" class="headerlink" title="yum源 与 apt源"></a>yum源 与 apt源</h1><p>Windows系统上可以通过360软件管家等实现软件的一键安装、升级和卸载，Linux 系统也提供有这样的工具，就是 <code>yum</code>和 <code>apt</code>。<br><strong>yum</strong>, “Yellow dog Updater, Modified”, CentOS上专门为了解决包的依赖关系而存在的软件包管理器。<br><strong>apt</strong>, “Advanced Packaging Tool”, Ubuntu或Debian上一款强大的包管理工具。<br><code>yum</code>和<code>apt</code>都可以看做是改进型的<code>RPM</code>软件管理器，<code>yum</code>和<code>apt</code>本质上是一样的，都是linux操作系统上的<code>rpm</code>依赖管理软件， 都能很好的解决<code>RPM</code>所面临的软件包依赖问题。</p><p>以下就以免费操作系统<code>CentOS</code>以<code>yum</code>为例进行说明：<br><code>yum</code>在服务器端存有所有的<code>RPM</code>包, 并将各个包之间的依赖关系记录在文件中,当管理员使用<code>yum</code>安装<code>RPM</code>包时，会先从服务器端下载包的依赖性文件，通过分析此文件从服务器端一次性下载所有相关的<code>RPM</code>包并进行安装。<br>因此，要想正常<code>yum</code>，就需要指定正确的的服务器。一般情况下，只要你的主机网络正常，可以直接使用网络<code>yum</code>，不需要对配置文件做任何修改。<br>但默认的服务器在国外，由于中国国内网络原因，访问速度极其缓慢，国内有许多权威机构和互联网大厂都对<code>yum</code>源做了镜像，我们只要将Linux的yum源切换到国内的镜像源地址，即可大大提升访问速度。</p><h2 id="yum源"><a href="#yum源" class="headerlink" title="yum源"></a>yum源</h2><p>CentOS 操作系统中，yum源的配置文件，位于 <code>/etc/yum.repos.d/</code>目录下，该目录下所有以<code>.repo</code>结尾的文件都是一个正在使用的yum源，在使用<code>yum</code>命令时，会遍历所有以<code>.repo</code>结尾的文件。</p><p>操作系统安装完成后，通常会有以下默认文件：<br><em><strong>CentOS-Base.repo  通常用来配置<code>网络yum源</code></strong></em><br><em><strong>CentOS-Media.repo 通常用来配置<code>本地yum源</code></strong></em></p><h2 id="设置网络yum源"><a href="#设置网络yum源" class="headerlink" title="设置网络yum源"></a>设置网络yum源</h2><h3 id="yum源国内开源镜像"><a href="#yum源国内开源镜像" class="headerlink" title="yum源国内开源镜像"></a>yum源国内开源镜像</h3><p>推荐：中国科技大学<br>但官方未提供<code>repo</code>下载文件，通过命令方式修改</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo sed -e &#x27;s|^mirrorlist=|#mirrorlist=|g&#x27; \</span><br><span class="line">-e &#x27;s|^#baseurl=http://mirror.centos.org/centos|baseurl=https://mirrors.ustc.edu.cn/centos|g&#x27; \</span><br><span class="line">-i.bak \</span><br><span class="line">/etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure><p>  其他国内镜像源</p><table><thead><tr><th align="left">—</th><th align="left">阿里</th><th align="left">网易</th></tr></thead><tbody><tr><td align="left"><strong>centos8</strong></td><td align="left"><a href="https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo">https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo</a></td><td align="left"><a href="http://mirrors.163.com/.help/CentOS8-Base-163.repo">http://mirrors.163.com/.help/CentOS8-Base-163.repo</a></td></tr><tr><td align="left"><strong>centos7</strong></td><td align="left"><a href="https://mirrors.aliyun.com/repo/Centos-7.repo">https://mirrors.aliyun.com/repo/Centos-7.repo</a></td><td align="left"><a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo">http://mirrors.163.com/.help/CentOS7-Base-163.repo</a></td></tr><tr><td align="left"><strong>centos6</strong></td><td align="left"><a href="https://mirrors.aliyun.com/repo/Centos-vault-6.10.repo">https://mirrors.aliyun.com/repo/Centos-vault-6.10.repo</a></td><td align="left"><a href="http://mirrors.163.com/.help/CentOS6-Base-163.repo">http://mirrors.163.com/.help/CentOS6-Base-163.repo</a></td></tr></tbody></table><h3 id="修改yum源"><a href="#修改yum源" class="headerlink" title="修改yum源"></a>修改yum源</h3><p>方式一：提前下载好yum源文件，假设 <code>~/</code>目录下已下载好阿里 centos8 镜像源文件 Centos-vault-8.5.2111.repo</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份原有镜像源文件</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/yum.repos.d/bakup</span><br><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/*.repo /etc/yum.repos.d/bakup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将镜像源拷贝至 /etc/yum.repos.d 目录, </span></span><br><span class="line"><span class="built_in">mv</span> ~/Centos-7.repo /etc/yum.repos.d/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件名称</span></span><br><span class="line">MV /etc/yum.repos.d/Centos-7.repo.repo CentOS-Base.repo</span><br></pre></td></tr></table></figure><p>方式二：通过网络下载</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份原有镜像源文件</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/yum.repos.d/bakup</span><br><span class="line"><span class="built_in">cp</span> -r /etc/yum.repos.d/*.repo /etc/yum.repos.d/bakup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载并重命名</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><h2 id="设置本地yum源"><a href="#设置本地yum源" class="headerlink" title="设置本地yum源"></a>设置本地yum源</h2><p>在无法联网的情况下，yum 可以考虑用本地光盘（或安装映像文件）作为 yum 源。<br>Linux 系统安装映像文件中就含有常用的 RPM 包，我们可以使用压缩文件打开映像文件（iso文件)。</p><h3 id="挂载-CentOS-安装镜像"><a href="#挂载-CentOS-安装镜像" class="headerlink" title="挂载 CentOS 安装镜像"></a>挂载 CentOS 安装镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建cdrom目录，作为光盘的挂载点</span></span><br><span class="line"><span class="built_in">mkdir</span> /mnt/cdrom</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载光盘到/mnt/cdrom目录下</span></span><br><span class="line">mount /dev/cdrom /mnt/cdrom/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出现如下信息说明挂载在成功</span></span><br><span class="line">mount: block device/dev/srO is write-protected, mounting read-only</span><br></pre></td></tr></table></figure><p>做好备份，并且在<code>/etc/yum.repos.d/</code>目录下，创建<code>CentOS-Media.repo</code>文件，并编辑</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[centos8-media]</span><br><span class="line">name=CentOS-8-Media</span><br><span class="line">baseurl=file:///mnt/cdrom</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span><br></pre></td></tr></table></figure><p>[centos8-media] # 当前配置节点，不可重复<br><code>name</code>       # 当前配置名称<br><code>baseurl</code>    # 地址为你自己的光盘挂载地址<br><code>enabled</code>    # 把enabled&#x3D;0改为enabled&#x3D;1, 让这个yum源配置文件生效<br><code>gpgcheck</code>   # gpgcheck&#x3D;1表示进行gpg验证, # 通常我们设置为0，不进行验证<br><code>gpgkey</code>     # gpg验证的地址，如果不验证则可以不设置</p><h2 id="yum源-初始化操作"><a href="#yum源-初始化操作" class="headerlink" title="yum源 初始化操作"></a>yum源 初始化操作</h2><p>初始化操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清理</span></span><br><span class="line">sudo yum clean all</span><br><span class="line"><span class="comment"># 进行缓存</span></span><br><span class="line">sudo yum makecache</span><br><span class="line"><span class="comment"># 升级已安装软件</span></span><br><span class="line">sudo yum update -y</span><br></pre></td></tr></table></figure><p>常用软件安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CentOS-Base.repo</span></span><br><span class="line">sudo yum install -y yum-utils bash-completion net-tools telnet</span><br><span class="line"><span class="comment"># CentOS-Base.repo</span></span><br><span class="line">sudo yum install -y perl epel-release gcc gcc-c++ make openssl openssl-devel pcre pcre-devel libtool zlib zlib-devel kernel-devel</span><br><span class="line"><span class="comment"># CentOS-Base.repo</span></span><br><span class="line">sudo yum install -y vim wget unzip gzip bind-utils </span><br><span class="line"><span class="comment"># CentOS-Base.repo</span></span><br><span class="line">sudo yum install -y dkms checkpolicy selinux-policy-devel</span><br><span class="line"><span class="comment"># epel.repo</span></span><br><span class="line">sudo yum intall -y jq tree bash-completion-extras</span><br></pre></td></tr></table></figure><p>关于yum源 <a href="http://c.biancheng.net/view/2931.html">详细可参考 http://c.biancheng.net/view/2931.html</a></p><h1 id="安全设置"><a href="#安全设置" class="headerlink" title="安全设置"></a>安全设置</h1><p>ssh配置, 编辑<code>/etc/ssh/sshd_config</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">UseDNS no</span><br><span class="line">GSSAPIAuthentication no</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 或</span></span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&#x27;s/UseDNS yes/GSSAPIAuthentication no/g&#x27;</span> /etc/ssh/sshd_config</span><br><span class="line">sed -i <span class="string">&#x27;s/GSSAPIAuthentication yes/GSSAPIAuthentication no/g&#x27;</span> /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>时间同步, 可选</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">echo &quot;01 */04 * * * root /usr/sbin/ntpdate 0.pool.ntp.org&quot; &gt;&gt; /etc/crontab</span><br><span class="line">systemctl restart crond</span><br></pre></td></tr></table></figure><p>防火墙</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><p>关闭selinux, 编辑<code>/etc/selinux/config</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/selinux/config</span><br><span class="line"></span><br><span class="line">SELINUX=disabled</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 或</span></span></span><br><span class="line"></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27; /etc/selinux/config</span><br></pre></td></tr></table></figure><p>设置最大进程数, 编辑<code>/etc/security/limits.conf</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*　　soft　　nofile　　655350</span><br><span class="line">*　　hard　　nofile　　655350</span><br><span class="line">*　　soft　　<span class="built_in">nproc</span>　　 655350</span><br><span class="line">*　　hard　　<span class="built_in">nproc</span>　　 655350</span><br><span class="line">*　　soft　　memlock　 unlimited</span><br><span class="line">*　　hard　　memlock　 unlimited</span><br></pre></td></tr></table></figure><p>关闭<code>swap</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">swapoff -a</span><br><span class="line"></span><br><span class="line">vim /etc/fstab</span><br><span class="line"></span><br><span class="line">注释掉 swap相关行</span><br></pre></td></tr></table></figure><p>systemd设置, 编辑<code>/etc/systemd/system.conf</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/systemd/system.conf</span><br><span class="line">DefaultLimitCORE=infinity</span><br><span class="line">DefaultLimitNOFILE=655350</span><br><span class="line">DefaultLimitNPROC=655350</span><br></pre></td></tr></table></figure><p>内核参数优化, 编辑<code>/etc/sysctl.conf</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁用ipv6</span></span><br><span class="line">net.ipv6.conf.all.disable_ipv6 = 1</span><br><span class="line">net.ipv6.conf.default.disable_ipv6 = 1</span><br><span class="line">net.ipv6.conf.lo.disable_ipv6 = 1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 打开路由转发功能</span></span></span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 激活swap之前可用内存的百分比</span></span></span><br><span class="line">vm.swappiness = 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 一个进程可以拥有的VMA(虚拟内存区域)的数量</span></span></span><br><span class="line">vm.max_map_count=655350</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 所有进程最大句柄数</span></span></span><br><span class="line">fs.file-max=655350</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 同时拥有 AIO 的线程数</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">fs.aio-max-nr = 1048576</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.ip_forward = 1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.conf.default.rp_filter = 1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.conf.default.accept_source_route = 0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.conf.default.arp_announce = 2</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.conf.lo.arp_announce=2</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.conf.all.arp_announce=2</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.route.gc_timeout = 100</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.tcp_max_tw_buckets = 5000</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.neigh.default.gc_stale_time=120</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.ip_local_port_range = 1024 65000</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭，对nat上网环境支持差，如果是最前端负载均衡服务器，不能开启，如果是后端web服务器，或者是数据库，缓存相关，可开启</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.tcp_tw_recycle = 1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.tcp_tw_reuse = 1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.tcp_max_orphans = 3276800</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.tcp_syn_retries = 1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.tcp_synack_retries = 1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.tcp_timestamps = 0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.tcp_fin_timeout = 30</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.tcp_sack = 1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.tcp_syncookies = 1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.tcp_window_scaling = 1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.tcp_rmem = 4096 87380 4194304</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.tcp_wmem = 4096 16384 4194304</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.tcp_max_syn_backlog = 65000</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.tcp_mem = 786432 1048576 1572864</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.tcp_max_orphans = 262144</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.tcp_mtu_probing = 1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.tcp_keepalive_time = 600</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.tcp_keepalive_probes = 3</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.tcp_keepalive_intvl = 15</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.ipv4.tcp_fastopen = 3</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#kernel.sysrq = 1</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">kernel.core_uses_pid = 1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">kernel.msgmnb = 65536</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">kernel.msgmax = 65536</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">kernel.shmmax = 68719476736</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">kernel.shmall = 4294967296</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">kernel.sem = 250 32000 100 128</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#net.core.wmem_default = 8388608</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.core.rmem_default = 8388608</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.core.rmem_max = 16777216</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.core.wmem_max = 16777216</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.core.somaxconn = 65535</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">net.core.netdev_max_backlog = 65000</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;yum源-与-apt源&quot;&gt;&lt;a href=&quot;#yum源-与-apt源&quot; class=&quot;headerlink&quot; title=&quot;yum源 与 apt源&quot;&gt;&lt;/a&gt;yum源 与 apt源&lt;/h1&gt;&lt;p&gt;Windows系统上可以通过360软件管家等实现软件的一键安装、升级和卸载，Linux 系统也提供有这样的工具，就是 &lt;code&gt;yum&lt;/code&gt;和 &lt;code&gt;apt&lt;/code&gt;。&lt;br&gt;&lt;strong&gt;yum&lt;/strong&gt;, “Yellow dog Updater, Modified”, CentOS上专门为了解决包的依赖关系而存在的软件包管理器。&lt;br&gt;&lt;strong&gt;apt&lt;/strong&gt;, “Advanced Packaging Tool”, Ubuntu或Debian上一款强大的包管理工具。&lt;br&gt;&lt;code&gt;yum&lt;/code&gt;和&lt;code&gt;apt&lt;/code&gt;都可以看做是改进型的&lt;code&gt;RPM&lt;/code&gt;软件管理器，&lt;code&gt;yum&lt;/code&gt;和&lt;code&gt;apt&lt;/code&gt;本质上是一样的，都是linux操作系统上的&lt;code&gt;rpm&lt;/code&gt;依赖管理软件， 都能很好的解决&lt;code&gt;RPM&lt;/code&gt;所面临的软件包依赖问题。&lt;/p&gt;
&lt;p&gt;以下就以免费操作系统&lt;code&gt;CentOS&lt;/code&gt;以&lt;code&gt;yum&lt;/code&gt;为例进行说明：&lt;br&gt;&lt;code&gt;yum&lt;/code&gt;在服务器端存有所有的&lt;code&gt;RPM&lt;/code&gt;包, 并将各个包之间的依赖关系记录在文件中,当管理员使用&lt;code&gt;yum&lt;/code&gt;安装&lt;code&gt;RPM&lt;/code&gt;包时，会先从服务器端下载包的依赖性文件，通过分析此文件从服务器端一次性下载所有相关的&lt;code&gt;RPM&lt;/code&gt;包并进行安装。&lt;br&gt;因此，要想正常&lt;code&gt;yum&lt;/code&gt;，就需要指定正确的的服务器。一般情况下，只要你的主机网络正常，可以直接使用网络&lt;code&gt;yum&lt;/code&gt;，不需要对配置文件做任何修改。&lt;br&gt;但默认的服务器在国外，由于中国国内网络原因，访问速度极其缓慢，国内有许多权威机构和互联网大厂都对&lt;code&gt;yum&lt;/code&gt;源做了镜像，我们只要将Linux的yum源切换到国内的镜像源地址，即可大大提升访问速度。&lt;/p&gt;
&lt;h2 id=&quot;yum源&quot;&gt;&lt;a href=&quot;#yum源&quot; class=&quot;headerlink&quot; title=&quot;yum源&quot;&gt;&lt;/a&gt;yum源&lt;/h2&gt;&lt;p&gt;CentOS 操作系统中，yum源的配置文件，位于 &lt;code&gt;/etc/yum.repos.d/&lt;/code&gt;目录下，该目录下所有以&lt;code&gt;.repo&lt;/code&gt;结尾的文件都是一个正在使用的yum源，在使用&lt;code&gt;yum&lt;/code&gt;命令时，会遍历所有以&lt;code&gt;.repo&lt;/code&gt;结尾的文件。&lt;/p&gt;
&lt;p&gt;操作系统安装完成后，通常会有以下默认文件：&lt;br&gt;&lt;em&gt;&lt;strong&gt;CentOS-Base.repo  通常用来配置&lt;code&gt;网络yum源&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;&lt;em&gt;&lt;strong&gt;CentOS-Media.repo 通常用来配置&lt;code&gt;本地yum源&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;设置网络yum源&quot;&gt;&lt;a href=&quot;#设置网络yum源&quot; class=&quot;headerlink&quot; title=&quot;设置网络yum源&quot;&gt;&lt;/a&gt;设置网络yum源&lt;/h2&gt;&lt;h3 id=&quot;yum源国内开源镜像&quot;&gt;&lt;a href=&quot;#yum源国内开源镜像&quot; class=&quot;headerlink&quot; title=&quot;yum源国内开源镜像&quot;&gt;&lt;/a&gt;yum源国内开源镜像&lt;/h3&gt;&lt;p&gt;推荐：中国科技大学&lt;br&gt;但官方未提供&lt;code&gt;repo&lt;/code&gt;下载文件，通过命令方式修改&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo sed -e &amp;#x27;s|^mirrorlist=|#mirrorlist=|g&amp;#x27; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-e &amp;#x27;s|^#baseurl=http://mirror.centos.org/centos|baseurl=https://mirrors.ustc.edu.cn/centos|g&amp;#x27; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-i.bak \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/etc/yum.repos.d/CentOS-Base.repo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://jnan806.panpan.cloud/categories/Linux/"/>
    
    
    <category term="linux" scheme="http://jnan806.panpan.cloud/tags/linux/"/>
    
    <category term="CentOS" scheme="http://jnan806.panpan.cloud/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>JAVA 垃圾收集器</title>
    <link href="http://jnan806.panpan.cloud/2016/03/10/java/garbage-collector/"/>
    <id>http://jnan806.panpan.cloud/2016/03/10/java/garbage-collector/</id>
    <published>2016-03-10T13:16:22.000Z</published>
    <updated>2016-03-11T10:18:02.000Z</updated>
    
    
    
    
    <category term="Java" scheme="http://jnan806.panpan.cloud/categories/Java/"/>
    
    
    <category term="java" scheme="http://jnan806.panpan.cloud/tags/java/"/>
    
    <category term="垃圾收集器" scheme="http://jnan806.panpan.cloud/tags/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>JAVA内存分配 与 垃圾回收机制</title>
    <link href="http://jnan806.panpan.cloud/2016/03/05/java/memory-recycling/"/>
    <id>http://jnan806.panpan.cloud/2016/03/05/java/memory-recycling/</id>
    <published>2016-03-05T13:12:35.000Z</published>
    <updated>2016-03-05T13:21:54.000Z</updated>
    
    
    
    
    <category term="Java" scheme="http://jnan806.panpan.cloud/categories/Java/"/>
    
    
    <category term="java" scheme="http://jnan806.panpan.cloud/tags/java/"/>
    
    <category term="内存分配" scheme="http://jnan806.panpan.cloud/tags/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
    
    <category term="垃圾回收" scheme="http://jnan806.panpan.cloud/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>maven</title>
    <link href="http://jnan806.panpan.cloud/2016/03/05/java/maven/maven/"/>
    <id>http://jnan806.panpan.cloud/2016/03/05/java/maven/maven/</id>
    <published>2016-03-05T13:12:35.000Z</published>
    <updated>2016-03-05T13:21:54.000Z</updated>
    
    
    
    
    <category term="Java" scheme="http://jnan806.panpan.cloud/categories/Java/"/>
    
    
    <category term="java" scheme="http://jnan806.panpan.cloud/tags/java/"/>
    
    <category term="maven" scheme="http://jnan806.panpan.cloud/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>JVM 与 运行时数据区</title>
    <link href="http://jnan806.panpan.cloud/2016/03/01/java/jvm-classloader/"/>
    <id>http://jnan806.panpan.cloud/2016/03/01/java/jvm-classloader/</id>
    <published>2016-03-01T12:00:08.000Z</published>
    <updated>2016-03-01T13:10:23.000Z</updated>
    
    
    
    
    <category term="Java" scheme="http://jnan806.panpan.cloud/categories/Java/"/>
    
    
    <category term="java" scheme="http://jnan806.panpan.cloud/tags/java/"/>
    
    <category term="jvm" scheme="http://jnan806.panpan.cloud/tags/jvm/"/>
    
    <category term="类加载器" scheme="http://jnan806.panpan.cloud/tags/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
    
  </entry>
  
</feed>
